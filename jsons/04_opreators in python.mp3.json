{
    "chunks": [
        {
            "number": "4",
            "title": "opreators in python",
            "start": 0.0,
            "end": 19.0,
            "text": " Now we will see what operators are in Python and how you can use operators in Python.  I have made an iPython notebook for you guys.  I have written about operators in it.  So primarily we have 6 types of operators in Python.  Here you can see arithmetic operators, comparison operators, logical operators,"
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 19.0,
            "end": 37.8,
            "text": " bitwise operators, assignment operators, membership and identity operators.  These 6 types of operators help you in doing operations in Python.  We have arithmetic operators, they are very simple.  Suppose I have a is equal to 10 here.  a is equal to 10 and b is equal to 5."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 37.8,
            "end": 50.68,
            "text": " So what can I do now?  I will enter a and write a plus b.  a plus b will give me 15.  Similarly a minus b will give me 5.  And a multiplied by b will give me 50."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 50.68,
            "end": 64.92,
            "text": " And a divided by b will give me 2.  Why will it give 2?  I have divided by 5 to give 2 to 10.  Here one thing is interesting that it always gives you a floating point number.  So whenever you divide by a, b, then it automatically gets decimal."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 64.92,
            "end": 89.72,
            "text": " And this question is asked in interviews.  If you didn't know this, then you should definitely see the whole Python refresher.  If I do a double forward slash b, then you get to see the integer here.  If I do 11, if the value of 1 is 11 and the value of b is 5, then it would be 2.  So if I start executing it from here, then you see a double divided by b is 2."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 89.72,
            "end": 103.56,
            "text": " Why did I do 2?  Because when we do a double divided by b, then the point that happens after that, it ends.  And again it returns the integer.  Okay, awesome.  So the way we have plus minus times divided,"
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 103.56,
            "end": 123.52,
            "text": " Similarly we have a floor division operator.  The modulus operator gives us a remainder and exponentation.  For example, if I do 2 to the power 2, then I can do something like this.  I will say I will do 2 and double start 2 and give 4 here.  And if I do 2 double star 5, then it will give me 32."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 123.52,
            "end": 139.4,
            "text": " Because 2 to the power 5 is 32.  So this is our exponentation operator.  I can definitely do a double star b, a very big number will come because I raised 11 to the power 5.  But this calculation can be done by us.  So we can use Python like a basic calculator."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 139.4,
            "end": 155.04000000000002,
            "text": " Most of the cases you will know this.  If you use Python a little, then if I enter a modulo b and shift,  It will tell me that when I divide a from b, then what will be the remainder?  So 5 to 10 is 10 and 1 will be left.  So this will be 1 remainder."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 155.04000000000002,
            "end": 169.36,
            "text": " So whenever you want to know what will be the remainder when I divide a from b,  Then you can do a modulo b.  And it will tell you the remainder.  Okay, so this is our arithmetic operators.  Now let's talk about comparison operators."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 169.4,
            "end": 190.20000000000002,
            "text": " Comparison operators always return true or false.  That is, they return bullions.  For example, if I say a is equal to 45, I am changing the value.  And I say a is equal to 4 and I say a greater than or a less than b.  So this is false."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 190.20000000000002,
            "end": 205.20000000000002,
            "text": " But if I say a greater than b, then this is true.  If I say a greater than equal to b, then this will be true.  Because a is greater than or equal to b.  So if this is greater than, then it will return true.  Equal to bk, a will return true."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 205.20000000000002,
            "end": 223.8,
            "text": " And similarly, less than and less than equal to b works.  So here we have greater than, greater than equal to, less than, less than equal to work.  Here you can see that it is used as double equal to.  Because we are already using equal to for assignment.  When I write c equals to 3, then I have done the value of c."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 224.20000000000002,
            "end": 241.20000000000002,
            "text": " So if I write a equal to c, then this will mean equal to a equal to c.  That is why it is used as double equal to.  If I write a double equal to c, then this is false.  It is saying that a is equal to c.  Because what is the value of a? 45 and what is the value of c? 3."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 241.20000000000002,
            "end": 253.6,
            "text": " So this is not equal.  So if you want to check the equality, then what will you do?  You will say a equals to c.  And this means that it is simple.  So this is a equal to c."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 253.6,
            "end": 270.59999999999997,
            "text": " We are asking this question and we have answered it.  It is not false to python.  If I write a not equal to c, then it is true.  Because I am asking, is a not equal to c?  So python is true."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 270.59999999999997,
            "end": 282.0,
            "text": " That is true.  It is not equal to c.  So we have some things here that you can use as comparison operators.  Double equal to.  Not of equals to a operator."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 282.0,
            "end": 300.0,
            "text": " Greater than operator, less than operator.  Greater than equal to a operator, less than equal to a operator.  So if I have a equal to 5 and b equals to b is 5.  And if I say a double equals to b, then it is true.  If I say a greater than equal to b, a greater than or equal to b."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 300.0,
            "end": 309.4,
            "text": " What will happen?  It will be true.  What will be less than equal to b?  It will be true.  So we are asking, is a less than or equal to b?"
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 309.4,
            "end": 325.4,
            "text": " It is not less than but equal to b.  So it is true.  So if someone tells you that if you are a good person and your eyes are on you, then come forward.  So if anything happens in Indira, then you will come forward.  So everyone will come forward."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 325.4,
            "end": 338.79999999999995,
            "text": " A good person is always there in your eyes.  Anyway, we will look at the rest of the operators.  We have seen comparison operators here.  Then we come to logical operators.  Logical operators and or and not."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 338.79999999999995,
            "end": 359.79999999999995,
            "text": " Logical operators operate only in Booleans.  So if I have two Booleans, one is b1 and b1 is equal to true and b2 equals to false.  These are two Booleans.  Now if I write here, not of b1 will come false.  And if I write it like this, not of b2 will come true."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 360.2,
            "end": 379.2,
            "text": " False is called true and false is called not operator.  And similarly we have and operator and we have or operator.  And operator returns true when both are true.  And or operator returns true when one of the two is true.  Let's see this thing."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 379.2,
            "end": 395.59999999999997,
            "text": " If I say b1 and b2, then it will return true because b1 is true.  If any of them is true, then it will return true.  If I say b1 and b2, then both of them need to be true.  Otherwise it will not be true.  It will be false."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 395.59999999999997,
            "end": 407.59999999999997,
            "text": " So you can understand this easily.  We have logical operators.  Now we have bitwise operators.  What do we do?  We convert it to binary and operate on bits."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 407.59999999999997,
            "end": 425.0,
            "text": " So convert 5 to binary, convert 3 to binary.  And then you put and operator in it.  And similarly if you put and operator, then your result will be 7.  So you can see this easily.  Now there are assignment operators."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 425.0,
            "end": 443.0,
            "text": " Which we are using knowingly and unknowingly.  What are those assignment operators?  We are already using them.  Plus equals to means a is equal to a plus 5.  So if I have a is equal to, I have written a equals to 45."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 443.4,
            "end": 459.4,
            "text": " And I have written a plus equals to 4.  And after that if I print a, it will be 49.  So if I have to add 4 in a value, then what will I do?  I will say a plus equals to 4.  Simple thing."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 459.4,
            "end": 470.4,
            "text": " Similarly I could have done a minus equals to 4.  So I will do a minus equals to 4.  And here you have to run very carefully.  First you have to make a value 45.  After that you have to do a minus equals to 4."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 470.79999999999995,
            "end": 485.79999999999995,
            "text": " And after that you have to print a, it will be 41.  Otherwise it will run at a minus equals to updated value.  Means we did a minus equals to 4.  And then we did a minus equals to 4.  And then we printed a equals to 41."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 485.79999999999995,
            "end": 500.2,
            "text": " If I run this cell again, it will operate at 41.  Means it will run at 37.  So you have to keep this in mind that  Cells are not executed in order.  So here you can see the cell numbers."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 500.2,
            "end": 512.2,
            "text": " So you have to be alert that which cell you have executed first.  Which one you have executed later.  You don't have to be confused because of ease.  Awesome.  So here we have these assignment operators."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 512.2,
            "end": 523.2,
            "text": " The way plus equals to work, the same way minus equals to this.  And star equals to this.  You don't have to take notes.  Because I will give you all these notes including the notebooks.  So don't take tension at all."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 523.2,
            "end": 534.6,
            "text": " These are the notes of python refresher.  The Jupyter notebook will work in your revision.  So don't take tension at all.  Similarly, slash equals to what will you do?  A is equal to A slash 5."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 534.6,
            "end": 544.6,
            "text": " What will you do double slash equal to?  A is equal to A double slash 5.  So you will update the same value.  Such that A double slash 5.  Means floor division."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 544.6,
            "end": 555.0,
            "text": " Floor division means that after dividing,  Finish whatever is coming after the point.  So this is it.  Now you can see the percent is equal to  A is equal to A module 5."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 555.0,
            "end": 565.0,
            "text": " Means whatever remainder is coming  A will do it by dividing from 5.  So I will show you.  Suppose if I do 11 here.  I run another cell here."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 565.0,
            "end": 575.0,
            "text": " I add one cell at the bottom.  There will be many cells in our notebook.  Suppose I say 11 double  forward slash 2.  So this is 5."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 575.0,
            "end": 585.4,
            "text": " If I say A is equal to  11 and I say A is equal to  11 and A is equal to  11 and I say A  double forward slash equals to 2."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 585.4,
            "end": 595.4,
            "text": " So what will be A's value?  So A's value will be 5.  Why will A's value be 5?  Because we have made A's value  11 double slash 2."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 595.4,
            "end": 605.4,
            "text": " So these are simple assignment operators.  They work like this.  And in a very similar way  We have a module  equal to B and exponential"
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 605.4,
            "end": 615.8,
            "text": " equal to B which is very rarely used  in Python programming language.  But again, you should definitely come.  If you are programming in Python.  Similarly, we have"
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 615.8,
            "end": 625.8,
            "text": " membership operators.  For example, if we do X in list.  So if we have a list in 2  letters, which we will read ahead.  If we have 2 in the list,"
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 625.8,
            "end": 635.8,
            "text": " then it will return true. Similarly,  what does not do in?  If it is not in the list, then it will return true.  Otherwise, what will happen is that  if there is only one object, like if I do A's B"
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 635.8,
            "end": 646.1999999999999,
            "text": " and A's value is 7  and B's value is 9  okay, A's value is 7  and B's value is 9.  So if I do A's B, then A and B"
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 646.1999999999999,
            "end": 656.1999999999999,
            "text": " are not pointing the same object.  So it will return false.  And similarly, what will it do?  If it returns true or different object.  Otherwise, it will return false."
        },
        {
            "number": "4",
            "title": "opreators in python",
            "start": 656.1999999999999,
            "end": 666.1999999999999,
            "text": " And that was a summary of  operators in Python.  I hope you are enjoying this video  and are enjoying the overall course.  And we will do it with"
        }
    ],
    "text": " Now we will see what operators are in Python and how you can use operators in Python. I have made an iPython notebook for you guys. I have written about operators in it. So primarily we have 6 types of operators in Python. Here you can see arithmetic operators, comparison operators, logical operators, bitwise operators, assignment operators, membership and identity operators. These 6 types of operators help you in doing operations in Python. We have arithmetic operators, they are very simple. Suppose I have a is equal to 10 here. a is equal to 10 and b is equal to 5. So what can I do now? I will enter a and write a plus b. a plus b will give me 15. Similarly a minus b will give me 5. And a multiplied by b will give me 50. And a divided by b will give me 2. Why will it give 2? I have divided by 5 to give 2 to 10. Here one thing is interesting that it always gives you a floating point number. So whenever you divide by a, b, then it automatically gets decimal. And this question is asked in interviews. If you didn't know this, then you should definitely see the whole Python refresher. If I do a double forward slash b, then you get to see the integer here. If I do 11, if the value of 1 is 11 and the value of b is 5, then it would be 2. So if I start executing it from here, then you see a double divided by b is 2. Why did I do 2? Because when we do a double divided by b, then the point that happens after that, it ends. And again it returns the integer. Okay, awesome. So the way we have plus minus times divided, Similarly we have a floor division operator. The modulus operator gives us a remainder and exponentation. For example, if I do 2 to the power 2, then I can do something like this. I will say I will do 2 and double start 2 and give 4 here. And if I do 2 double star 5, then it will give me 32. Because 2 to the power 5 is 32. So this is our exponentation operator. I can definitely do a double star b, a very big number will come because I raised 11 to the power 5. But this calculation can be done by us. So we can use Python like a basic calculator. Most of the cases you will know this. If you use Python a little, then if I enter a modulo b and shift, It will tell me that when I divide a from b, then what will be the remainder? So 5 to 10 is 10 and 1 will be left. So this will be 1 remainder. So whenever you want to know what will be the remainder when I divide a from b, Then you can do a modulo b. And it will tell you the remainder. Okay, so this is our arithmetic operators. Now let's talk about comparison operators. Comparison operators always return true or false. That is, they return bullions. For example, if I say a is equal to 45, I am changing the value. And I say a is equal to 4 and I say a greater than or a less than b. So this is false. But if I say a greater than b, then this is true. If I say a greater than equal to b, then this will be true. Because a is greater than or equal to b. So if this is greater than, then it will return true. Equal to bk, a will return true. And similarly, less than and less than equal to b works. So here we have greater than, greater than equal to, less than, less than equal to work. Here you can see that it is used as double equal to. Because we are already using equal to for assignment. When I write c equals to 3, then I have done the value of c. So if I write a equal to c, then this will mean equal to a equal to c. That is why it is used as double equal to. If I write a double equal to c, then this is false. It is saying that a is equal to c. Because what is the value of a? 45 and what is the value of c? 3. So this is not equal. So if you want to check the equality, then what will you do? You will say a equals to c. And this means that it is simple. So this is a equal to c. We are asking this question and we have answered it. It is not false to python. If I write a not equal to c, then it is true. Because I am asking, is a not equal to c? So python is true. That is true. It is not equal to c. So we have some things here that you can use as comparison operators. Double equal to. Not of equals to a operator. Greater than operator, less than operator. Greater than equal to a operator, less than equal to a operator. So if I have a equal to 5 and b equals to b is 5. And if I say a double equals to b, then it is true. If I say a greater than equal to b, a greater than or equal to b. What will happen? It will be true. What will be less than equal to b? It will be true. So we are asking, is a less than or equal to b? It is not less than but equal to b. So it is true. So if someone tells you that if you are a good person and your eyes are on you, then come forward. So if anything happens in Indira, then you will come forward. So everyone will come forward. A good person is always there in your eyes. Anyway, we will look at the rest of the operators. We have seen comparison operators here. Then we come to logical operators. Logical operators and or and not. Logical operators operate only in Booleans. So if I have two Booleans, one is b1 and b1 is equal to true and b2 equals to false. These are two Booleans. Now if I write here, not of b1 will come false. And if I write it like this, not of b2 will come true. False is called true and false is called not operator. And similarly we have and operator and we have or operator. And operator returns true when both are true. And or operator returns true when one of the two is true. Let's see this thing. If I say b1 and b2, then it will return true because b1 is true. If any of them is true, then it will return true. If I say b1 and b2, then both of them need to be true. Otherwise it will not be true. It will be false. So you can understand this easily. We have logical operators. Now we have bitwise operators. What do we do? We convert it to binary and operate on bits. So convert 5 to binary, convert 3 to binary. And then you put and operator in it. And similarly if you put and operator, then your result will be 7. So you can see this easily. Now there are assignment operators. Which we are using knowingly and unknowingly. What are those assignment operators? We are already using them. Plus equals to means a is equal to a plus 5. So if I have a is equal to, I have written a equals to 45. And I have written a plus equals to 4. And after that if I print a, it will be 49. So if I have to add 4 in a value, then what will I do? I will say a plus equals to 4. Simple thing. Similarly I could have done a minus equals to 4. So I will do a minus equals to 4. And here you have to run very carefully. First you have to make a value 45. After that you have to do a minus equals to 4. And after that you have to print a, it will be 41. Otherwise it will run at a minus equals to updated value. Means we did a minus equals to 4. And then we did a minus equals to 4. And then we printed a equals to 41. If I run this cell again, it will operate at 41. Means it will run at 37. So you have to keep this in mind that Cells are not executed in order. So here you can see the cell numbers. So you have to be alert that which cell you have executed first. Which one you have executed later. You don't have to be confused because of ease. Awesome. So here we have these assignment operators. The way plus equals to work, the same way minus equals to this. And star equals to this. You don't have to take notes. Because I will give you all these notes including the notebooks. So don't take tension at all. These are the notes of python refresher. The Jupyter notebook will work in your revision. So don't take tension at all. Similarly, slash equals to what will you do? A is equal to A slash 5. What will you do double slash equal to? A is equal to A double slash 5. So you will update the same value. Such that A double slash 5. Means floor division. Floor division means that after dividing, Finish whatever is coming after the point. So this is it. Now you can see the percent is equal to A is equal to A module 5. Means whatever remainder is coming A will do it by dividing from 5. So I will show you. Suppose if I do 11 here. I run another cell here. I add one cell at the bottom. There will be many cells in our notebook. Suppose I say 11 double forward slash 2. So this is 5. If I say A is equal to 11 and I say A is equal to 11 and A is equal to 11 and I say A double forward slash equals to 2. So what will be A's value? So A's value will be 5. Why will A's value be 5? Because we have made A's value 11 double slash 2. So these are simple assignment operators. They work like this. And in a very similar way We have a module equal to B and exponential equal to B which is very rarely used in Python programming language. But again, you should definitely come. If you are programming in Python. Similarly, we have membership operators. For example, if we do X in list. So if we have a list in 2 letters, which we will read ahead. If we have 2 in the list, then it will return true. Similarly, what does not do in? If it is not in the list, then it will return true. Otherwise, what will happen is that if there is only one object, like if I do A's B and A's value is 7 and B's value is 9 okay, A's value is 7 and B's value is 9. So if I do A's B, then A and B are not pointing the same object. So it will return false. And similarly, what will it do? If it returns true or different object. Otherwise, it will return false. And that was a summary of operators in Python. I hope you are enjoying this video and are enjoying the overall course. And we will do it with"
}