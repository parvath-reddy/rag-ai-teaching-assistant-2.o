{
    "chunks": [
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 0.0,
            "end": 21.0,
            "text": " Today we will see F string score in Python programming  Let's go into the computer screen and understand things well  I have already made a Jupyter notebook for you guys  I will name it as F string and I will tell you about it  The string is arguably the most used data types in Python"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 21.0,
            "end": 40.0,
            "text": " Now let me explain the meaning of this string  If you have made a string and you have written s is equal to Harry  If you want to access it, you can do it this way  If you do s1, you will get to see it  If you write s1, you will get to see it this way"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 40.0,
            "end": 48.0,
            "text": " And so on  But can you do something like this?  S0 is equal to...  I can put a second character here  I can put p here"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 48.0,
            "end": 57.0,
            "text": " You can't  The reason for that is that string is immutable  Here you see that string object does not support item assignment  There is an error  Why did this error occur?"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 57.0,
            "end": 65.0,
            "text": " Because you can't change the string  But wait a minute  We had seen string methods  We were able to change the string there  No, we were not able to change the string"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 65.0,
            "end": 77.0,
            "text": " If I had written s is equal to Harry  And then I have written s.upper  So here I am not changing the s  If you print s again  Then it is the same as s"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 77.0,
            "end": 88.0,
            "text": " A new string makes a new string  No matter what method it is  In most of the cases  If you run any string method  Then you get a new string"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 88.0,
            "end": 100.0,
            "text": " Which is changed version of original string  But what is the original string changed?  The answer is no  Immutable means that  In Python, it is impossible to change the string"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 100.0,
            "end": 112.0,
            "text": " You can't change the string  You can make a new string  Which will be updated version of this string  But you can't change existing string  So it is very important to know this thing for you"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 112.0,
            "end": 122.0,
            "text": " Now we will see how to do string formatting  Look at this code  Here we have written name is equal to Alice  Age is equal to 25  Now you can see here"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 122.0,
            "end": 132.0,
            "text": " I want my name is Alice and I am 25 years old  So here it is written  So for this, there is a format function  And we run the format in a way that  You give any string"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 132.0,
            "end": 138.0,
            "text": " You run dot format on it  And the values you give  Will be here  Wherever you have put curly braces  It will fit there"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 138.0,
            "end": 148.0,
            "text": " Like in this case  Your new string will be  My name is Alice and I am 25 years old  If I want to generate many strings like this  So what I will have to do is"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 148.0,
            "end": 156.0,
            "text": " I will have to write my name is John  And my name is John  I am 25 years old  Now if you consider that John is 45 or 55  So if you run it like this"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 156.0,
            "end": 167.0,
            "text": " Then you will get this string change  So sometimes we have to make a template  And we have to insert different values in that template  And for that we use the format method  So this is an old way"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 167.0,
            "end": 174.0,
            "text": " To do string formatting in Python  That it works today  Yes, it works today  But Python 3.6 onwards  A very good way came"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 174.0,
            "end": 183.0,
            "text": " And its name is f string  What we do is  We will write a statement like this directly  We will say that  If you are printing"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 183.0,
            "end": 191.0,
            "text": " So directly write print statement  Something like this  And put an f here  Which has become an f string  And insert the values here"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 191.0,
            "end": 201.0,
            "text": " For example, I will write the name of the variable here  My name is name  And I am age years old  I will hit shift enter  So this string will be my variable"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 201.0,
            "end": 211.0,
            "text": " And it will come after printing  So if you want to insert a variable  In a string  Then you can use f string like this  And that's pretty much about f strings"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 211.0,
            "end": 222.0,
            "text": " You can write an expression in f string  You can calculate anything here  A plus B A minus B  You can do multiplication in this  You can insert a new variable directly"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 222.0,
            "end": 233.0,
            "text": " You can do all these things  You can do formatting here  For example, here you see the value of pi  3.14159  You want to get only 2 decimal places"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 233.0,
            "end": 246.0,
            "text": " So you will write pi and you will write dot 2f  So you will get only 2 decimal places  So you can use the variable like this  You can change the variable and print it  And you can do this very conveniently"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 246.0,
            "end": 255.0,
            "text": " Now you can see here  That we can do padding and alignment like this  I will tell you what this means  If you will write something like this  You wrote python"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 255.0,
            "end": 265.0,
            "text": " And you wrote colon  I will execute a new code  If I execute this directly  You will feel what did I do  This is not printing python"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 265.0,
            "end": 275.0,
            "text": " But if I will show you all these lines  With one hand, you will know  Basically, whenever I am writing  So I am basically saying  That align left"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 275.0,
            "end": 283.0,
            "text": " That is, align this string  Align left  Such that  This is left in the width of 10 characters  I will show you these three lines"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 283.0,
            "end": 292.0,
            "text": " Then you will understand easily  So here we have taken total width of 10 characters  And within that we are moving python  Sometimes we are align left  Sometimes we are align right"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 292.0,
            "end": 299.0,
            "text": " We are align center  If I will hit shift enter  You will understand  This is the width of our 10 characters  This is the width of our 10 characters"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 299.0,
            "end": 308.0,
            "text": " If you count characters from here, then it will be 10  Now when I am writing the first line  I have written the string colon less than 10  I am saying here that  Align left"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 308.0,
            "end": 318.0,
            "text": " In a total character width of length 10  Okay  And here I have said  Align center with the width of 10 characters  So we can align a particular word"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 318.0,
            "end": 328.0,
            "text": " Align left and right  And such things are very useful  In command line games  So you should know this  Those who have skipped python refreshers"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 328.0,
            "end": 338.0,
            "text": " There is a good chance that they don't know all these things  So in the beginning I had suggested  That don't skip lectures  And don't skip any lectures  Take time and learn"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 338.0,
            "end": 348.0,
            "text": " So you can learn  So you can learn  So you can learn  So your foundation will be strong  I hope this video is helpful"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 348.0,
            "end": 359.0,
            "text": " I have written a line here  Which explains what it is doing  Column less than 10  This symbol means  That left align the text within a total width of 10 characters"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 359.0,
            "end": 371.0,
            "text": " Okay  And f strings are the most efficient  And recommended ways of formatting a string in python  If you want to format strings in modern python  I will suggest you to use f string"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 371.0,
            "end": 381.0,
            "text": " Don't use dot format  I am saying directly  Because f string is an easy and intuitive way  Easy to read way  Python 3.6 is introduced"
        },
        {
            "number": "9",
            "title": "String formatting and f-strings",
            "start": 381.0,
            "end": 391.0,
            "text": " Which is a very good thing  I will call python 3.6 old  There are new versions of python in today's series  I hope you understood  See you in the next video"
        }
    ],
    "text": " Today we will see F string score in Python programming Let's go into the computer screen and understand things well I have already made a Jupyter notebook for you guys I will name it as F string and I will tell you about it The string is arguably the most used data types in Python Now let me explain the meaning of this string If you have made a string and you have written s is equal to Harry If you want to access it, you can do it this way If you do s1, you will get to see it If you write s1, you will get to see it this way And so on But can you do something like this? S0 is equal to... I can put a second character here I can put p here You can't The reason for that is that string is immutable Here you see that string object does not support item assignment There is an error Why did this error occur? Because you can't change the string But wait a minute We had seen string methods We were able to change the string there No, we were not able to change the string If I had written s is equal to Harry And then I have written s.upper So here I am not changing the s If you print s again Then it is the same as s A new string makes a new string No matter what method it is In most of the cases If you run any string method Then you get a new string Which is changed version of original string But what is the original string changed? The answer is no Immutable means that In Python, it is impossible to change the string You can't change the string You can make a new string Which will be updated version of this string But you can't change existing string So it is very important to know this thing for you Now we will see how to do string formatting Look at this code Here we have written name is equal to Alice Age is equal to 25 Now you can see here I want my name is Alice and I am 25 years old So here it is written So for this, there is a format function And we run the format in a way that You give any string You run dot format on it And the values you give Will be here Wherever you have put curly braces It will fit there Like in this case Your new string will be My name is Alice and I am 25 years old If I want to generate many strings like this So what I will have to do is I will have to write my name is John And my name is John I am 25 years old Now if you consider that John is 45 or 55 So if you run it like this Then you will get this string change So sometimes we have to make a template And we have to insert different values in that template And for that we use the format method So this is an old way To do string formatting in Python That it works today Yes, it works today But Python 3.6 onwards A very good way came And its name is f string What we do is We will write a statement like this directly We will say that If you are printing So directly write print statement Something like this And put an f here Which has become an f string And insert the values here For example, I will write the name of the variable here My name is name And I am age years old I will hit shift enter So this string will be my variable And it will come after printing So if you want to insert a variable In a string Then you can use f string like this And that's pretty much about f strings You can write an expression in f string You can calculate anything here A plus B A minus B You can do multiplication in this You can insert a new variable directly You can do all these things You can do formatting here For example, here you see the value of pi 3.14159 You want to get only 2 decimal places So you will write pi and you will write dot 2f So you will get only 2 decimal places So you can use the variable like this You can change the variable and print it And you can do this very conveniently Now you can see here That we can do padding and alignment like this I will tell you what this means If you will write something like this You wrote python And you wrote colon I will execute a new code If I execute this directly You will feel what did I do This is not printing python But if I will show you all these lines With one hand, you will know Basically, whenever I am writing So I am basically saying That align left That is, align this string Align left Such that This is left in the width of 10 characters I will show you these three lines Then you will understand easily So here we have taken total width of 10 characters And within that we are moving python Sometimes we are align left Sometimes we are align right We are align center If I will hit shift enter You will understand This is the width of our 10 characters This is the width of our 10 characters If you count characters from here, then it will be 10 Now when I am writing the first line I have written the string colon less than 10 I am saying here that Align left In a total character width of length 10 Okay And here I have said Align center with the width of 10 characters So we can align a particular word Align left and right And such things are very useful In command line games So you should know this Those who have skipped python refreshers There is a good chance that they don't know all these things So in the beginning I had suggested That don't skip lectures And don't skip any lectures Take time and learn So you can learn So you can learn So you can learn So your foundation will be strong I hope this video is helpful I have written a line here Which explains what it is doing Column less than 10 This symbol means That left align the text within a total width of 10 characters Okay And f strings are the most efficient And recommended ways of formatting a string in python If you want to format strings in modern python I will suggest you to use f string Don't use dot format I am saying directly Because f string is an easy and intuitive way Easy to read way Python 3.6 is introduced Which is a very good thing I will call python 3.6 old There are new versions of python in today's series I hope you understood See you in the next video"
}